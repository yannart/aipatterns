/*
 * MainFrame.java
 *
 * Created on 9 mai 2007, 21:08
 */

package org.ai.pattern.gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import javax.swing.RootPaneContainer;
import org.ai.pattern.Filtrable;
import org.ai.pattern.Filtro;
import org.ai.pattern.gui.ImageFrame;

/**
 *
 * @author  yannart
 */
public class MainFrame extends javax.swing.JFrame implements Filtrable{
    
    JFileChooser filechooser = new JpgFileChooser();
    GlassPane glass;
    Filtro filtro;
    FiltroDialog filtrodlg;
    
    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        glass = new GlassPane();
        glass.setGlassPane(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuArchivo = new javax.swing.JMenu();
        jMenuItemAbrir = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItemSalir = new javax.swing.JMenuItem();
        jMenuImagen = new javax.swing.JMenu();
        jMenuItemFiltrar = new javax.swing.JMenuItem();
        jMenuAyuda = new javax.swing.JMenu();
        jMenuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Reconocimiento de Patrones");

        jDesktopPane.setBackground(new java.awt.Color(147, 191, 237));

        jMenuArchivo.setText("Archivo");

        jMenuItemAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/abrir.png"))); // NOI18N
        jMenuItemAbrir.setText("Abrir");
        jMenuItemAbrir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemAbrirMousePressed(evt);
            }
        });
        jMenuArchivo.add(jMenuItemAbrir);
        jMenuArchivo.add(jSeparator1);

        jMenuItemSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/quit.png"))); // NOI18N
        jMenuItemSalir.setText("Salir");
        jMenuItemSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemSalirMousePressed(evt);
            }
        });
        jMenuArchivo.add(jMenuItemSalir);

        jMenuBar1.add(jMenuArchivo);

        jMenuImagen.setText("Imagen");

        jMenuItemFiltrar.setText("Aplicar filtro");
        jMenuItemFiltrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemFiltrarMousePressed(evt);
            }
        });
        jMenuImagen.add(jMenuItemFiltrar);

        jMenuBar1.add(jMenuImagen);

        jMenuAyuda.setText("Ayuda");

        jMenuItemAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/foco.png"))); // NOI18N
        jMenuItemAbout.setText("Acerca de...");
        jMenuItemAbout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItemAboutMousePressed(evt);
            }
        });
        jMenuAyuda.add(jMenuItemAbout);

        jMenuBar1.add(jMenuAyuda);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    public void filtrar(float[] matriz){
        if(filtro == null){
            filtro = new Filtro(this);
        }
        
        BufferedImage bufferedImage = getImagenActual();
        if(bufferedImage != null){
            this.pausar(true);
            filtro.filtrar(bufferedImage, matriz);
        }
    }
    
    public void imagenFiltrada(BufferedImage image){
        pausar(false);
        if(image != null){
            setImagenActual(image);
        }
    }
    
    public BufferedImage getImagenActual(){
        ImageFrame selectedframe = (ImageFrame) jDesktopPane.getSelectedFrame();
        if(selectedframe == null){
            return null;
        }
        
        return selectedframe.getImage();
    }
    
    public void setImagenActual(BufferedImage imagen){
        ImageFrame selectedframe = (ImageFrame) jDesktopPane.getSelectedFrame();
        if(selectedframe != null){
            selectedframe.setImage(imagen);
        }
    }
    
    public void pausar(final boolean enpausa){
        if(enpausa){
            glass.setGlassPane(MainFrame.this);
            glass.setDrawing(true);
        }else{
            glass.removeGlassPane();
        }
    }
    
private void jMenuItemFiltrarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemFiltrarMousePressed
    if(filtrodlg == null){
        filtrodlg = new FiltroDialog(this, true);
    }
    
    filtrodlg.setVisible(true);
}//GEN-LAST:event_jMenuItemFiltrarMousePressed

private void jMenuItemAboutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemAboutMousePressed
    EventQueue.invokeLater(new Runnable() {
        public void run() {
            (new AcercaDe(MainFrame.this, true)).setVisible(true);
        }
    });
}//GEN-LAST:event_jMenuItemAboutMousePressed

private void jMenuItemAbrirMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemAbrirMousePressed
    int returnVal = filechooser.showOpenDialog(this);
    
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = filechooser.getSelectedFile();
        JInternalFrame internalframe = new ImageFrame(file);
        jDesktopPane.add(internalframe);
        jDesktopPane.setSelectedFrame(internalframe);
    }
}//GEN-LAST:event_jMenuItemAbrirMousePressed

private void jMenuItemSalirMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemSalirMousePressed
    this.dispose();
}//GEN-LAST:event_jMenuItemSalirMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane jDesktopPane;
    private javax.swing.JMenu jMenuArchivo;
    private javax.swing.JMenu jMenuAyuda;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuImagen;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemAbrir;
    private javax.swing.JMenuItem jMenuItemFiltrar;
    private javax.swing.JMenuItem jMenuItemSalir;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
    
}

class GlassPane extends JPanel implements MouseListener, Runnable{
    private RootPaneContainer rootPane = null;
    private Component prevGlassPane = null;
    private boolean drawing = false;
    private Image[] imagenes;
    private int numimagen;
    private Thread thread;
    private int imageX, imageY, w, h;
    
    public GlassPane() {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        imagenes = new Image[8];
        for(int i = 0; i < 8; i++){
            imagenes[i] = toolkit.getImage(getClass().getResource("/imagenes/indicador" + (i + 1) + ".png"));
        }
        thread = new Thread(this);
    }
    
    
    public void setGlassPane(RootPaneContainer rootPane) {
        this.rootPane = rootPane;
        prevGlassPane = rootPane.getGlassPane();
        this.rootPane.setGlassPane(this);
        setOpaque(false);
        w = getWidth();
        h = getHeight();
        imageY = (h - imagenes[numimagen].getHeight(null))/2;
        imageX = (w - imagenes[numimagen].getWidth(null))/2;
    }
    
    public void removeGlassPane(){
        rootPane.setGlassPane(prevGlassPane);
        setDrawing(false);
    }
    
    public void setDrawing(boolean draw){
        drawing = draw;
        setVisible(true);
        if(draw){
            addMouseListener(this);
            thread = new Thread(this);
            thread.start();
        }else{
            removeMouseListener(this);
        }
        repaint();
    }
    
    public void paint(Graphics g) {
        if (drawing) {
            g.setFont(new Font("Default",Font.BOLD,16));
            FontMetrics fontMetrics = g.getFontMetrics();
            int textWidth = fontMetrics.stringWidth("POR FAVOR ESPERE...");
            int textHeight = fontMetrics.getHeight();
            
            g.setColor(new Color(255,255,255,200));
            g.fillRect(0, 0, w, h);
            g.drawImage(imagenes[numimagen], imageX, imageY, null);
            g.setColor(new Color(100,100,100,200));
            g.drawString("POR FAVOR ESPERE...",w / 2 - textWidth / 2 ,imageY - textHeight);
        }
    }
    
    public void mouseExited(MouseEvent evt){ }
    public void mouseEntered(MouseEvent evt){ }
    public void mousePressed(MouseEvent evt){ }
    public void mouseReleased(MouseEvent evt){ }
    public void mouseClicked(MouseEvent evt){ }
    
    public void run() {
        while(drawing){
            try {
                thread.sleep(50);
            } catch (InterruptedException ex) {
                Logger.getLogger("global").log(Level.SEVERE, null, ex);
            }
            
            numimagen++;
            if (numimagen >= imagenes.length) {
                numimagen = 0;
            }
            repaint();
        }
    }
}
